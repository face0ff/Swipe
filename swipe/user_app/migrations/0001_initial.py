# Generated by Django 4.2.1 on 2023-05-27 21:16

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('infrastructures_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, upload_to='img/avatar/', verbose_name='Аватар')),
                ('telephone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('agent_first_name', models.CharField(max_length=32, verbose_name='Имя')),
                ('agent_last_name', models.CharField(max_length=32, verbose_name='Фамилия')),
                ('agent_telephone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('agent_email', models.EmailField(max_length=32, verbose_name='Имейл')),
                ('notification', models.CharField(choices=[('me', 'Мне'), ('me_and_agent', 'Мне и агенту'), ('agent', 'Агенту'), ('off', 'Отключить')], max_length=15)),
                ('to_agent', models.BooleanField(default=True)),
                ('black_list', models.BooleanField(default=True)),
                ('role', models.CharField(choices=[('admin', 'Админ'), ('manager', 'Менеджер'), ('user', 'Агенту'), ('owner', 'Отключить')], max_length=15)),
                ('favorite_apartments', models.ManyToManyField(to='infrastructures_app.apartment', verbose_name='Пользователи')),
                ('favorite_infrastructures', models.ManyToManyField(to='infrastructures_app.infrastructure', verbose_name='Пользователи')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notaries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=32, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=32, verbose_name='Фамилия')),
                ('telephone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('email', models.EmailField(max_length=32, verbose_name='Имейл')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paid_by', models.DateField(default=datetime.date.today, verbose_name='Дата')),
                ('auto_renewal', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apartment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infrastructures_app.apartment')),
                ('infrastructure_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infrastructures_app.infrastructure')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст сообщения')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='subscription',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='user_app.subscription'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
